---
title: "cm008 Exercises"
output: github_document
---

##Install `nycflights13` package

```{r,eval=FALSE}
install.packages("nycflights13")
```

```{r}
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(nycflights13))
```

## Types of mutating join

###Let's join data.frames using four mutating functions:

- create two data.frames named `a` and `b`, similar to Data Wrangling Cheatsheet
- use `left_join`, `right_join`, `inner_join` and `full_join` functions
- example for `left_join`: Join matching rows from b to a
- example for `right_join`: Join matching rows from a to b
- example for `inner_join`: Join data. Retain only rows in both sets
- example for `full_join`: Join data. Retain all values, all rows
- example of using two different variables from two datasets
- example of two variables have identical names 

```{r}
#create two data.frames named a and b
(a <- data.frame(x1 = LETTERS[1:3], x2 = 1:3))
(b <- data.frame(x1 = LETTERS[c(1,2,4)], x3 = c("T", "F", "T")))

#left_join: Join matching rows from b to a
left_join(a, b, by = "x1")

#right_join: Join matching rows from a to b.
right_join(a, b, by = "x1")

#inner_join: Join data. Retain only rows in both sets
inner_join(a, b, by = "x1")

#full_join: Join data. Retain all values, all rows.
full_join(a, b, by = "x1")

#what happen if we do not specify by option?
left_join(a, b)

#what happen if we specify two different variables from two data.frames?
left_join(a, b, by = c("x1" = "x3"))

#what happen if two columns have the identical names
(c <- data.frame(x1 = c(LETTERS[1:2],"x"), x2 = c(1,4,5)))
inner_join(a, c)
```

## `nycflights13` dataset has four tibbles e.g., `flights`, `airports`, `planes` and `weather`.

###Explore and subset data:

- Explore `nycflights13` dataset
- to reduce the running time, subset `flights` data.frame taking first 1000 rows and year, tailnum, carrier, time_hour columns.

###Practice Exercises:
- check which variables are common in `weather` and `flights2` datasets
- add `weather` information to the `flights2` dataset by matching "year" and "time_hour" variables.
-add `weather` information to the `flights2` dataset by matching only "time_hour" variable.

```{r}
#check the tibbles included in `nycflights13` package
class(flights)
colnames(flights)
colnames(airports)
colnames(planes)
colnames(weather)

# Drop unimportant variables so it's easier to understand the join results. Also take first 1000 rows to run it faster.
flights2 <- flights[1:1000,] %>% 
  select(year, tailnum, carrier, time_hour)

dim(flights2)
colnames(flights2)

#add airline names from `airlines` dataset 
colnames(airlines)

flights2 %>% 
  left_join(airlines) 

#add weather information to the flights2 dataset by matching "year" and "time_hour" variables.
colnames(weather)
flights2 %>% left_join(weather)

#add weather information to the flights2 dataset by matching only "time_hour" variable.
flights2 %>% left_join(weather, by = "time_hour")
```

## Types of filtering join

###Let's filter data.frames using two filtering functions:

- create two data.frames named `a` and `b`, similar to Data Wrangling Cheatsheet
- use `semi_join`, `anti_join` functions
- example for `semi_join`: All rows in a that have a match in b
- example for `anti_join`: All rows in a that do not have a match in b
- example of using two different variables from two datasets


```{r}
#create two data.frames named a and b
(a <- data.frame(x1 = LETTERS[1:3], x2 = 1:3))
(b <- data.frame(x1 = LETTERS[c(1,2,4)], x3 = c("T", "F", "T")))

# example for `semi_join`: All rows in a that have a match in b
semi_join(a,b)

# example for `anti_join`: All rows in a that do not have a match in b
anti_join(a,b)

# example of using two different variables from two datasets

(c <- data.frame(x1 = c(LETTERS[1:2],"x"), x2 = c(1,4,5)))
semi_join(a, c)
```

## Types of Set Operations for two datasets

###Let's use three `set` functions:

- create two data.frames named `y` and `z`, similar to Data Wrangling Cheatsheet
- use `intersect`, `union` and `setdiff` functions
- example for `intersect`: Rows that appear in both `y` and `z`
- example for `union`: Rows that appear in either or both `y` and `z`
- example for `setdiff`: Rows that appear in `y` but not `z`. __Caution:__ `setdiff` for `y` to `z` and `z` to `y` are different.
- what happen if colnames are different? 

```{r}
# create two data.frames named `y` and `z`, similar to Data Wrangling Cheatsheet
(y = data.frame(x1 = LETTERS[1:3], x2 = 1:3))
(z = data.frame(x1 = c("B", "C", "D"), x2 = 2:4))

# example for `intersect`: Rows that appear in both `y` and `z`
intersect(y,z)

# example for `union`: Rows that appear in either or both `y` and `z`
union(y,z)

# example for `setdiff`: Rows that appear in `y` but not `z`. __Caution:__ `setdiff` for `y` to `z` and `z` to `y` are different.
setdiff(y,z)

setdiff(z,y)

# what happen if colnames are different? 
(x = data.frame(x1 = c("B", "C", "D"), x3 = 2:4))
#intersect(y,x)
#intersect(y,x)
```

## Types of binding datasets

###Let's bind datasets by rows or column using two binding functions:

- create two data.frames named `y` and `z`, similar to Data Wrangling Cheatsheet
- use `bind_rows`, `bind_cols` functions
- example for `bind_rows`: Append z to y as new rows
- example for `bind_cols`: Append z to y as new columns. __Caution__: matches rows by position
- what happen if colnames are different? 

```{r}
# create two data.frames named `y` and `z`, similar to Data Wrangling Cheatsheet
(y = data.frame(x1 = LETTERS[1:3], x2 = 1:3))
(z = data.frame(x1 = c("B", "C", "D"), x2 = 2:4))

# example for `bind_rows`: Append z to y as new rows
bind_rows(y,z)

# example for `bind_cols`: Append z to y as new columns. __Caution__: matches rows by position
bind_cols(y,z) #check colnames

# what happen if colnames are different? 
(x = data.frame(x1 = c("B", "C", "D"), x3 = 2:4))
bind_rows(y,x)
bind_cols(y,x)
```


##Practice Exercises
Practice these concepts in the following exercises. It might help you to first identify the type of function you are applying.

#### Let's create a data.frame `a` with x1 and x2 coulmns and have duplicated element in x1 column. Create another data.frame `b` with x1 and x3 columns. Then apply `left_join` function `a` to `b` and `b` to `a`. 


