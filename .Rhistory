class(flights)
colnames(flights)
colnames(airports)
colnames(planes)
colnames(weather)
suppressPackageStartupMessages(library(nycflights13))
#check the tibbles included in `nycflights13` package
class(flights)
colnames(flights)
colnames(airports)
colnames(planes)
colnames(weather)
# Drop unimportant variables so it's easier to understand the join results. Also take first 20000 rows to run it faster.
#flights2 <- flights %>% select(year:day, hour, origin, dest, tailnum, carrier)
flights2 <- flights[1:1000,] %>% select(year, tailnum, carrier)
suppressPackageStartupMessages(library(tidyverse))
# Drop unimportant variables so it's easier to understand the join results. Also take first 20000 rows to run it faster.
#flights2 <- flights %>% select(year:day, hour, origin, dest, tailnum, carrier)
flights2 <- flights[1:1000,] %>% select(year, tailnum, carrier)
dim(flights2)
colnames(flights2)
#add airline names from `airlines` by carrier
flights2 %>%
left_join(airlines)
#add airline names from `airlines` by carrier
colnames(airlines)
flights2 %>%
left_join(airlines)
colnames(weather)
colnames(flights2)
intersect(colnames(flight), colnames(weather))
intersect(colnames(flight), colnames(weather))
intersect(colnames(flights), colnames(weather))
head(weather)
# Drop unimportant variables so it's easier to understand the join results. Also take first 20000 rows to run it faster.
#flights2 <- flights %>% select(year:day, hour, origin, dest, tailnum, carrier)
flights2 <- flights[1:1000,] %>%
select(year, tailnum, carrier, origin)
flights2 %>% left_join(weather)
t = flights2 %>% left_join(weather)
dim(t)
# Drop unimportant variables so it's easier to understand the join results. Also take first 20000 rows to run it faster.
#flights2 <- flights %>% select(year:day, hour, origin, dest, tailnum, carrier)
flights2 <- flights[1:1000,] %>%
select(year, tailnum, carrier, origin)
t = flights2 %>% left_join(weather)
dim(t)
View(t)
View(t)
# Drop unimportant variables so it's easier to understand the join results. Also take first 20000 rows to run it faster.
#flights2 <- flights %>% select(year:day, hour, origin, dest, tailnum, carrier)
flights2 <- flights[1:1000,] %>%
select(year, tailnum, carrier, hour)
t = flights2 %>% left_join(weather)
dim(t)
colnames(wetehr)
colnames(wether)
colnames(weather)
# Drop unimportant variables so it's easier to understand the join results. Also take first 20000 rows to run it faster.
#flights2 <- flights %>% select(year:day, hour, origin, dest, tailnum, carrier)
flights2 <- flights[1:1000,] %>%
select(year, tailnum, carrier, time_hour)
t = flights2 %>% left_join(weather)
dim(t)
View(flights2)
flights2 %>% left_join(weather, by = "year") %>% dim()
flights2 %>% left_join(weather, by = "time_hour") %>% dim()
flights2 %>% left_join(weather)  %>% dim()
flights2 %>% left_join(weather)  %>% colnames()
flights2 %>% left_join(weather, by = "time_hour") %>% colnames()
t = flights2 %>% left_join(weather)  %>% colnames()
t2 = flights2 %>% left_join(weather, by = "time_hour") %>% colnames()
intersect(t, t)
intersect(t, t2)
setdiff(t, t2)
dim(weather)
dim(flights2)
#create two data.frames named a and b
(a <- data.frame(x1 = LETTERS[1:3], x2 = 1:3))
(b <- data.frame(x1 = LETTERS[c(1,2,4)], x3 = c("T", "F", "T")))
# example for `semi_join`: All rows in a that have a match in b
semi_join(a,b)
a
b
# example for `anti_join`: All rows in a that do not have a match in b
anti_join(a,b)
(c <- data.frame(x1 = c(LETTERS[1:2],"x"), x2 = c(1,4,5)))
semi_join(a, c)
# example for `semi_join`: All rows in a that have a match in b
semi_join(a,b)
semi_join(a, c)
levels(a)
levels(a$x1)
typeof(a$x1)
typeof(a$x2)
a$x2
a
a$x1
typeof(a$x1)
class(a)
class(a$x1)
filter(gapminder, country=="Rwanda"|country=="Afghanistan")
library(gapminder)
install.packages(gapminder)
install.packages("gapminder")
library(gapminder)
filter(gapminder, country=="Rwanda"|country=="Afghanistan")
filter(gapminder, country=="Rwanda"|country=="Afghanistan") %dimdim()%
filter(gapminder, country=="Rwanda"|country=="Afghanistan") %>% dimdim()
filter(gapminder, country=="Rwanda"|country=="Afghanistan") %>% dim()
filter(gapminder, country=="Rwanda|Afghanistan") %>% dim()
filter(gapminder, country=="Rwanda | Afghanistan") %>% dim()
filter(gapminder, country=="Rwanda" | "Afghanistan") %>% dim()
filter(gapminder, country=="Rwanda"|"Afghanistan") %>% dim()
filter(gapminder, country=="Rwanda|Afghanistan") %>% dim()
filter(gapminder, country %in% c("Rwanda", "Afghanistan")) %>% dim()
avc <- c("a", "b", "c") # create a random character short vector of 3
ave <- c("a", "b", "c", "d", "e") # create a random character long vector of 5
avc %in% ave
avc == ave
# create two data.frames named `y` and `z`, similar to Data Wrangling Cheatsheet
(y = data.frame(x1 = LETTERS[1:3], x2 = 1:3))
(z = data.frame(x1 = c("B", "C", "D"), x2 = 2:4))
# example for `intersect`: Rows that appear in both `y` and `z`
intersect(y,z)
# example for `union`: Rows that appear in either or both `y` and `z`
union(y,z)
# example for `setdiff`: Rows that appear in `y` but not `z`. __Caution:__ `setdiff` for `y` to `z` and `z` to `y` are different.
setdiff(y,z)
setdiff(z,y)
# example for `bind_rows`: Append z to y as new rows
bind_rows(y,z)
# example for `bind_cols`: Append z to y as new columns. __Caution__: matches rows by position
bind_cols(y,z)
bind_rows(y,x)
bind_cols(y,x)
(x = data.frame(x1 = c("B", "C", "D"), x3 = 2:4))
bind_cols(y,x)
bind_rows(y,x)
# what happen if colnames are different?
(x = data.frame(x1 = c("B", "C", "D"), x3 = 2:4))
intersect(y,x)
intersect(y,x)
typeof(a)
typeof(x)
typeof(x$x1)
class(x$x1)
#create two data.frames named a and b
(a <- tibble(x1 = LETTERS[1:3], x2 = 1:3))
gapminder %>%
# group by continent
group_by(continent) %>%
# calculate summaries
summarize(
avg_gdpPercap = mean(gdpPercap),
max_lifeExp = max(lifeExp),
min_pop = min(pop),
total = n()
) %>%
# display table
knitr::kable()
?gather
library(tidyverse)
?gather
#check the tibbles included in `nycflights13` package
class(flights)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(nycflights13))
suppressPackageStartupMessages(library(tidyverse))
flights2 <- flights[1:1000,] %>%
select(year, tailnum, carrier, time_hour)
dim(flights2)
colnames(flights2)
# Which join function to use?
colnames(airlines)
flights2 %>%
left_join(airlines)
flights2 %>%
left_join(airlines)
# Which join function to use?
colnames(airlines)
flights2 %>%
left_join(airlines)
colnames(weather)
flights2 %>% left_join(weather)
flights2 %>% left_join(weather, by = c("year", "time_hour"))
flights2 %>% inner_join(weather, by = c("year", "time_hour"))
flights2 %>% left_join(weather, by = c("year", "time_hour"))
semi_join(a,b)
a
(a <- tibble(x1 = LETTERS[1:3], x2 = 1:3))
(b <- tibble(x1 = LETTERS[c(1,2,4)], x3 = c("T", "F", "T")))
semi_join(a,b)
anti_join(a,b)
a
c
# make data frame c and use inner_join()
(c <- tibble(x1 = c(LETTERS[1:2],"x"), x2 = c(1,4,5)))
c
semi_join(a, c, by = c("x1" == "x2"))
semi_join(a, c, by = c("x1" = "x2"))
semi_join(a, c, by = c("x1", "x2"))
a
c
b
semi_join(a, c)
(y <-  tibble(x1 = LETTERS[1:3], x2 = 1:3))
(z <- tibble(x1 = c("B", "C", "D"), x2 = 2:4))
intersect(y,z)
(x <- tibble(x1 = c("B", "C", "D"), x3 = 2:4))
intersect(y,x)
y
z
bind_rows(y,z)
bind_cols(y,z) #check colnames
bind_cols(z,y)
(x <- tibble(x1 = c("B", "C", "D"), x3 = 2:4))
bind_rows(y,x)
bind_cols(y,x)
bind_rows(y,x)
semi_join(flights2, weather, by = c("year", "time_hour"))
anti_join(flights2, weather, by = c("year", "time_hour"))
bind_cols(flights2, weather)
bind_rows(flights2, weather)
intersect(flights2, weather)
#intersect(flights2, weather)
setdiff(flights2, weather)
#intersect(flights2, weather)
#setdiff(flights2, weather)
#bind_rows(flights2, weather)
bind_cos(flights2, weather)
left_join(a, b, by = c("x1" = "x3"))
left_join(a, b, by = c("x1", "x3"))
# make data frame c and use inner_join()
(c <- tibble(x1 = c(LETTERS[1:2],"x"), x2 = c(1,4,5)))
inner_join(a, c)
class(nycflights13)
str(nycflights13)
nycflights13
library(nycflights13)
nycflights13
list(nycflights13)
typeof(nycflights13)
#check the tibbles included in `nycflights13` package
class(flights)
colnames(flights)
colnames(airports)
colnames(planes)
colnames(weather)
#check the tibbles included in `nycflights13` package
class(flights)
colnames(flights)
colnames(airlines)
colnames(weather)
semi_join(a,b)
